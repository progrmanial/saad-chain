class Block:
   def __init__(self):
      self.verified_transactions = []
      self.previous_block_hash = ""
      self.Nonce = ""

   def dump_blockchain (self):
      print ("Number of blocks in the chain: " + str(len (self)))
      for x in range (len(TPCoins)):
         block_temp = TPCoins[x]
         print ("block # " + str(x))
         for transaction in block_temp.verified_transactions:
            display_transaction (transaction)
            print ('--------------')
         print ('=====================================')
   def sha256(message):
      return hashlib.sha256(message.encode('ascii')).hexdigest()
   def mine(message, difficulty=1):
      assert difficulty >= 1
      prefix = '1' * difficulty
      for i in range(1000):
         digest = sha256(str(hash(message)) + str(i))
         if digest.startswith(prefix):
            print ("after " + str(i) + " iterations found nonce: "+ digest)
            return digest
